{"version":3,"sources":["helpers/getCookie.js","hooks/index.js","helpers/loadTweets.js","helpers/apiTweetDetail.js","context/tweets-context.js","context/user-context.js","components/TweetForm.js","helpers/createTweet.js","components/ActionBtn.js","components/ParentTweet.js","components/Tweet.js","helpers/apiTweetAction.js","components/Tweets.js","components/TweetsComponent.js","App.js","components/Nav.js","serviceWorker.js","index.js","components/TweetDetail.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","useTweets","username","useState","tweets","setTweets","useEffect","url","fetch","then","response","ok","json","data","catch","error","console","loadTweets","newTweets","useTweet","tweetId","tweet","setTweet","apiTweetDetail","TweetsContext","createContext","TweetsProvider","children","useUserValue","Provider","value","useTweetsValue","useContext","UserContext","UserProvider","setUsername","TweetForm","props","tweetText","setTweetText","remainingChars","setRemainingChars","className","onSubmit","event","preventDefault","newTweet","csrftoken","method","body","JSON","stringify","headers","createTweet","content","newCreatedTweet","htmlFor","id","rows","onChange","text","target","slice","type","ActionBtn","action","handleTweetActionBtn","btnText","likes","onClick","ParentTweet","parent","hideActions","Tweet","isDetail","actionTweet","setActionTweet","tweet_id","tweetData","apiTweetAction","status","to","user","map","index","key","Tweets","TweetsComponent","App","useParams","isProfileView","useLocation","pathname","Nav","exact","Boolean","window","location","hostname","match","rootElement","getElementById","ReactDOM","render","StrictMode","path","component","params","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b54b65a3.chunk.js","sourcesContent":["export const getCookie = (name) => {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== \"\") {\n    var cookies = document.cookie.split(\";\");\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n};\n","import { useState, useEffect } from \"react\";\n\nimport { loadTweets, apiTweetDetail } from \"../helpers\";\n\nexport const useTweets = (username) => {\n  const [tweets, setTweets] = useState([]);\n\n  // useEffect(() => {\n  //   loadTweets().then((newTweets) => {\n  //     setTweets(newTweets);\n  //   });\n  // }, []);\n\n  useEffect(() => {\n    loadTweets(username).then((newTweets) => {\n      setTweets(newTweets);\n    });\n  }, [username]);\n\n  return { tweets, setTweets };\n};\n\nexport const useTweet = (tweetId) => {\n  const [tweet, setTweet] = useState(null);\n\n  useEffect(() => {\n    apiTweetDetail(tweetId).then((tweet) => {\n      setTweet(tweet);\n    });\n  }, [tweetId]);\n\n  return { tweet, setTweet };\n};\n","export const loadTweets = (username) => {\n  let url = \"http://127.0.0.1:8000/api/tweets/\";\n  if (username) {\n    url = `${url}${username}/`;\n  }\n\n  return fetch(url)\n    .then((response) => (response.ok ? response.json() : []))\n    .then((data) => data)\n    .catch((error) => {\n      console.error(\"Error:\", error);\n    });\n};\n","export const apiTweetDetail = (tweetId) => {\n  const url = `http://127.0.0.1:8000/api/tweets/${tweetId}/`;\n\n  return fetch(url)\n    .then((response) => (response.ok ? response.json() : []))\n    .then((data) => data)\n    .catch((error) => {\n      console.error(\"Error:\", error);\n    });\n};\n","import React, { createContext, useContext } from \"react\";\nimport { useTweets } from \"../hooks\";\n\nimport { useUserValue } from \"../context\";\n\nexport const TweetsContext = createContext();\n\nexport const TweetsProvider = ({ children }) => {\n  const { username } = useUserValue();\n  const { tweets, setTweets } = useTweets(username);\n\n  return (\n    <TweetsContext.Provider\n      value={{ tweets, setTweets }}\n      // value={{ tweets, setTweets }}\n    >\n      {children}\n    </TweetsContext.Provider>\n  );\n};\n\nexport const useTweetsValue = () => useContext(TweetsContext);\n","import React, { useState, createContext, useContext } from \"react\";\n\nexport const UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n  const [username, setUsername] = useState();\n\n  return (\n    <UserContext.Provider\n      value={{ username, setUsername }}\n      // value={{ tweets, setTweets }}\n    >\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUserValue = () => useContext(UserContext);\n","import React, { useState } from \"react\";\n\nimport { useTweetsValue } from \"../context\";\nimport { createTweet } from \"../helpers\";\n\nconst TweetForm = (props) => {\n  const { setTweets } = useTweetsValue();\n  const maxCharacters = 240;\n\n  const [tweetText, setTweetText] = useState(\"\");\n  const [remainingChars, setRemainingChars] = useState(maxCharacters);\n\n  const handleChange = (event) => {\n    const text = event.target.value.slice(0, maxCharacters);\n    setTweetText(text);\n    setRemainingChars(maxCharacters - text.length);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    createTweet({ content: tweetText }).then((newCreatedTweet) => {\n      setTweets((tweets) => [newCreatedTweet, ...tweets]);\n    });\n    setTweetText(\"\");\n  };\n\n  return (\n    <div className={props.className}>\n      <div className=\"col-6 mb-2 mx-auto\">\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"tweet\">Create your new tweet</label>\n          <textarea\n            className=\"form-control\"\n            name=\"tweet\"\n            id=\"tweet\"\n            rows=\"3\"\n            value={tweetText}\n            onChange={handleChange}\n          />\n          <p className=\"text-muted left\">\n            {`${remainingChars} characters remaining...`}\n          </p>\n          <button type=\"submit\" className=\"btn btn-primary my-3\">\n            Tweet\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TweetForm;\n","import { getCookie } from \"./getCookie\";\n\nexport const createTweet = (newTweet) => {\n  const csrftoken = getCookie(\"csrftoken\");\n  return fetch(\"http://127.0.0.1:8000/api/tweets/create/\", {\n    method: \"post\",\n    body: JSON.stringify(newTweet),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      \"X-CSRFToken\": csrftoken,\n    },\n  })\n    .then((response) => (response.ok ? response.json() : {}))\n    .then((data) => data)\n    .catch((error) => {\n      console.error(\"Error:\", error);\n    });\n};\n","import React from \"react\";\n\nexport const ActionBtn = (props) => {\n  const { tweet, action, handleTweetActionBtn } = props;\n\n  const className = props.className\n    ? props.className\n    : \"btn btn-primary btn-sm\";\n\n  const btnText =\n    action === \"like\"\n      ? `${tweet.likes} Likes`\n      : action === \"unlike\"\n      ? \"Unlike\"\n      : action === \"retweet\"\n      ? \"Retweet\"\n      : null;\n\n  return (\n    <button\n      className={className}\n      onClick={() => handleTweetActionBtn(tweet.id, tweet.likes, action)}\n    >\n      {btnText}\n    </button>\n  );\n};\n","import React from \"react\";\nimport { Tweet } from \"./Tweet\";\n\nexport function ParentTweet(props) {\n  const { tweet } = props;\n  return tweet.parent ? (\n    <div className=\"row\">\n      <div className=\"col-11 mx-auto p-3 border rounded\">\n        <p className=\"mb-0 text-muted small\">Retweet</p>\n        <Tweet hideActions className={\" \"} tweet={tweet.parent} />\n      </div>\n    </div>\n  ) : null;\n}\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ActionBtn } from \"./ActionBtn\";\nimport { ParentTweet } from \"./ParentTweet\";\n\nimport { useTweetsValue } from \"../context\";\nimport { apiTweetAction } from \"../helpers\";\n\nexport const Tweet = (props) => {\n  const { tweet, hideActions, isDetail } = props;\n  const { setTweets } = useTweetsValue();\n\n  const tweetActions = [\"like\", \"unlike\", \"retweet\"];\n\n  const [actionTweet, setActionTweet] = useState(tweet ? tweet : null);\n\n  const className = props.className\n    ? props.className\n    : \"col-10 mx-auto col-md-6 border\";\n\n  const handleTweetActionBtn = (tweet_id, likes, action) => {\n    apiTweetAction({\n      id: tweet_id,\n      action,\n    }).then((response) => {\n      const status = response.status;\n      response.json().then((tweet) => {\n        if (status === 200) {\n          setActionTweet(tweet);\n        } else if (status === 201) {\n          setTweets((tweets) => [tweet, ...tweets]);\n        }\n      });\n    });\n  };\n\n  return (\n    <div className={className}>\n      <div>\n        <p>\n          Tweet by <Link to={`/profile/${tweet.user}`}>{tweet.user}</Link>\n        </p>\n        <p>{`${tweet.id} - ${tweet.content}`}</p>\n        <ParentTweet tweet={tweet} />\n      </div>\n      <div className=\"btn btn-group\">\n        {actionTweet && hideActions !== true && (\n          <>\n            {tweetActions.map((action, index) => (\n              <ActionBtn\n                key={index}\n                tweet={actionTweet}\n                action={action}\n                handleTweetActionBtn={handleTweetActionBtn}\n              />\n            ))}\n          </>\n        )}\n        {!isDetail && (\n          <Link to={`/${tweet.id}`} className=\"btn btn-primary\">\n            View Tweet\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { getCookie } from \"./getCookie\";\n\nexport const apiTweetAction = (tweetData) => {\n  const csrftoken = getCookie(\"csrftoken\");\n  return fetch(\"http://127.0.0.1:8000/api/tweets/action/\", {\n    method: \"post\",\n    body: JSON.stringify(tweetData),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      \"X-CSRFToken\": csrftoken,\n    },\n  })\n    .then((response) => response)\n    .catch((error) => {\n      console.error(\"Error:\", error);\n    });\n};\n","import React from \"react\";\n\nimport { Tweet } from \"./Tweet\";\n\nimport { useTweetsValue } from \"../context\";\n\nexport const Tweets = () => {\n  const { tweets } = useTweetsValue();\n\n  return (\n    <div className=\"col-10 mx-auto col-md-8\">\n      {tweets.map((tweet) => (\n        <Tweet\n          key={tweet.id}\n          tweet={tweet}\n          className=\"py-5 my-5 border bg-white text-dark\"\n        />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport TweetForm from \"./TweetForm\";\nimport { Tweets } from \"./Tweets\";\n\nimport { TweetsProvider } from \"../context\";\n\nexport const TweetsComponent = () => {\n  return (\n    <div className=\"col-10 mx-auto mt-5\">\n      <TweetsProvider>\n        <TweetForm />\n        <Tweets />\n      </TweetsProvider>\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useLocation, useParams } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport { useUserValue } from \"./context\";\nimport { TweetsComponent } from \"./components/TweetsComponent\";\n\nfunction App(props) {\n  const { username, setUsername } = useUserValue();\n\n  //const { username } = props.match.params;\n\n  let { user } = useParams();\n\n  let location = useLocation();\n\n  let isProfileView = location.pathname === `/profile/${user}`;\n\n  useEffect(() => {\n    setUsername(user);\n  }, [setUsername, user]);\n\n  return (\n    <div className=\"App\">\n      {isProfileView ? (\n        username ? (\n          <TweetsComponent />\n        ) : null\n      ) : (\n        <TweetsComponent />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Nav = () => {\n  return (\n    <div>\n      <Link to=\"/\" exact=\"true\">\n        Home\n      </Link>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport { TweetDetail } from \"./components/TweetDetail\";\nimport { Nav } from \"./components/Nav\";\nimport { UserProvider } from \"./context\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Nav />\n      <UserProvider>\n        <Switch>\n          <Route path=\"/\" exact component={App} />\n          <Route path=\"/profile/:user\" exact component={App} />\n          <Route path=\"/:id\" exact component={TweetDetail} />\n        </Switch>\n      </UserProvider>\n    </Router>\n  </React.StrictMode>,\n  rootElement\n);\n\n// const tweetDetailElements = document.querySelectorAll(\".tweet-detail\");\n// tweetDetailElements.forEach((element) => {\n//   ReactDOM.render(\n//     <React.StrictMode>\n//       <TweetsProvider>\n//         {createElement(TweetDetail, element.dataset)}\n//       </TweetsProvider>\n//     </React.StrictMode>,\n//     element\n//   );\n// });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Tweet } from \"./Tweet\";\nimport { useTweet } from \"../hooks\";\n\nexport const TweetDetail = (props) => {\n  const { id } = props.match.params;\n  const { tweet } = useTweet(id);\n\n  return tweet === null ? null : (\n    <Tweet tweet={tweet} isDetail className={props.className} />\n  );\n};\n"],"sourceRoot":""}